---
- name: Trigger PXE boot on servers via OOB management
  hosts: localhost
  gather_facts: yes
  vars:
    boot_wait_time: 10  # Wait time between hosts (seconds)

  tasks:
    - name: Set inventory variables as facts
      set_fact:
        pxe_hosts: "{{ hostvars[inventory_hostname]['pxe_hosts'] }}"

    - name: Display OOB boot plan
      debug:
        msg:
          - "========================================="
          - "PXE Boot Trigger Plan"
          - "========================================="
          - "Total servers: {{ pxe_hosts | length }}"
          - "This will:"
          - "  1. Set next boot to PXE/Network"
          - "  2. Trigger server restart"
          - "  3. Servers will boot from network"
          - "========================================="

    - name: Pause for confirmation
      pause:
        prompt: |

          WARNING: This will restart all servers and boot them from network!

          Press ENTER to continue or Ctrl+C to abort...

    - name: Set boot device to PXE (one-time boot override)
      command: >
        {{ playbook_dir }}/scripts/redfish_pxe_boot.py
        {{ host.oob_address }}
        {{ host.oob_username }}
        {{ host.oob_password }}
        set_boot
      loop: "{{ pxe_hosts }}"
      loop_control:
        loop_var: host
      register: boot_device_result
      ignore_errors: yes
      when: host.oob_address is defined
      no_log: true

    - name: Power cycle servers to trigger PXE boot
      command: >
        {{ playbook_dir }}/scripts/redfish_pxe_boot.py
        {{ host.oob_address }}
        {{ host.oob_username }}
        {{ host.oob_password }}
        reset
      loop: "{{ pxe_hosts }}"
      loop_control:
        loop_var: host
        pause: "{{ boot_wait_time }}"
      register: restart_result
      ignore_errors: yes
      when: host.oob_address is defined
      no_log: true

    - name: Parse boot device results
      set_fact:
        boot_results_parsed: >-
          {{
            boot_device_result.results | default([]) |
            selectattr('skipped', 'undefined') |
            map(attribute='stdout') |
            map('from_json') |
            list
          }}

    - name: Parse restart results
      set_fact:
        restart_results_parsed: >-
          {{
            restart_result.results | default([]) |
            selectattr('skipped', 'undefined') |
            map(attribute='stdout') |
            map('from_json') |
            list
          }}

    - name: Display boot results
      debug:
        msg:
          - "========================================="
          - "PXE Boot Results"
          - "========================================="
          - ""
          - "Boot device configuration:"
          - "{% for idx in range(pxe_hosts | length) %}{% if boot_results_parsed[idx] is defined %}  - {{ pxe_hosts[idx].name }}: {{ 'SUCCESS' if not boot_results_parsed[idx].failed else 'FAILED - ' + boot_results_parsed[idx].msg }}{% endif %}{% endfor %}"
          - ""
          - "Power cycle status:"
          - "{% for idx in range(pxe_hosts | length) %}{% if restart_results_parsed[idx] is defined %}  - {{ pxe_hosts[idx].name }}: {{ 'SUCCESS (HTTP ' + (restart_results_parsed[idx].status_code | string) + ')' if not restart_results_parsed[idx].failed else 'FAILED - ' + restart_results_parsed[idx].msg }}{% endif %}{% endfor %}"
          - ""
          - "Monitor progress:"
          - "  - Check dnsmasq DHCP logs: journalctl -u dnsmasq -f"
          - "  - Check TFTP transfers: journalctl -u dnsmasq | grep TFTP"
          - "  - Verify nodes boot into Talos maintenance mode"
          - ""
          - "Next steps:"
          - "  1. Wait for all nodes to PXE boot (2-5 minutes)"
          - "  2. Run: ansible-playbook -i inventory.yml deploy-talos-cluster.yml"
          - "========================================="

    - name: Create boot log
      copy:
        content: |
          # PXE Boot Trigger Log

          Triggered: {{ ansible_date_time.iso8601 }}
          By: {{ ansible_env.USER }}@{{ ansible_hostname }}

          ## Servers Triggered

          {% for host in pxe_hosts %}
          - {{ host.name }} ({{ host.ip }})
            - OOB: {{ host.oob_address }}
            - Type: {{ host.oob_type }}
            - Role: {{ host.role }}
          {% endfor %}

          ## Boot Device Configuration

          {% for idx in range(pxe_hosts | length) %}
          {% if boot_results_parsed[idx] is defined %}
          - {{ pxe_hosts[idx].name }}: {{ 'SUCCESS' if not boot_results_parsed[idx].failed else 'FAILED - ' + boot_results_parsed[idx].msg }}
          {% endif %}
          {% endfor %}

          ## Power Cycle Status

          {% for idx in range(pxe_hosts | length) %}
          {% if restart_results_parsed[idx] is defined %}
          - {{ pxe_hosts[idx].name }}: {{ 'SUCCESS (HTTP ' + (restart_results_parsed[idx].status_code | string) + ')' if not restart_results_parsed[idx].failed else 'FAILED - ' + restart_results_parsed[idx].msg }}
          {% endif %}
          {% endfor %}

          ## Monitoring Commands

          ```bash
          # Watch DHCP requests
          sudo journalctl -u dnsmasq -f | grep DHCP

          # Watch TFTP downloads
          sudo journalctl -u dnsmasq -f | grep TFTP

          # Check what IPs have been assigned
          sudo cat /var/lib/misc/dnsmasq.leases
          ```

          ## Next Steps

          Once all nodes have PXE booted into Talos maintenance mode:

          ```bash
          ansible-playbook -i inventory.yml deploy-talos-cluster.yml
          ```
        dest: "{{ playbook_dir }}/pxe-boot-{{ ansible_date_time.epoch }}.log"
        mode: '0644'

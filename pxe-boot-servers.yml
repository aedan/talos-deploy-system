---
- name: Trigger PXE boot on servers via OOB management
  hosts: localhost
  gather_facts: no
  vars:
    boot_wait_time: 10  # Wait time between hosts (seconds)
    verify_ssl: false   # Set to true if using valid SSL certificates

  tasks:
    - name: Set inventory variables as facts
      set_fact:
        pxe_hosts: "{{ hostvars[inventory_hostname]['pxe_hosts'] }}"

    - name: Display OOB boot plan
      debug:
        msg:
          - "========================================="
          - "PXE Boot Trigger Plan"
          - "========================================="
          - "Total servers: {{ pxe_hosts | length }}"
          - "This will:"
          - "  1. Set next boot to PXE/Network"
          - "  2. Trigger server restart"
          - "  3. Servers will boot from network"
          - "========================================="

    - name: Pause for confirmation
      pause:
        prompt: |

          WARNING: This will restart all servers and boot them from network!

          Press ENTER to continue or Ctrl+C to abort...

    - name: Set one-time PXE boot via Redfish
      uri:
        url: "https://{{ host.oob_address }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ host.oob_username }}"
        password: "{{ host.oob_password }}"
        body_format: json
        body:
          ResetType: "ForceRestart"
        force_basic_auth: yes
        validate_certs: "{{ verify_ssl }}"
        status_code: [200, 202, 204]
        headers:
          Content-Type: "application/json"
      loop: "{{ pxe_hosts }}"
      loop_control:
        loop_var: host
        pause: "{{ boot_wait_time }}"
      register: boot_result
      ignore_errors: yes
      when: host.oob_address is defined

    - name: Set boot device to PXE before reset (alternative method)
      uri:
        url: "https://{{ host.oob_address }}/redfish/v1/Systems/1"
        method: PATCH
        user: "{{ host.oob_username }}"
        password: "{{ host.oob_password }}"
        body_format: json
        body:
          Boot:
            BootSourceOverrideEnabled: "Once"
            BootSourceOverrideTarget: "Pxe"
        force_basic_auth: yes
        validate_certs: "{{ verify_ssl }}"
        status_code: [200, 202, 204]
        headers:
          Content-Type: "application/json"
      loop: "{{ pxe_hosts }}"
      loop_control:
        loop_var: host
      register: boot_device_result
      ignore_errors: yes
      when:
        - host.oob_address is defined
        - boot_result.results[loop_index0].failed | default(false)
      loop_control:
        index_var: loop_index0

    - name: Power cycle servers with PXE boot set
      uri:
        url: "https://{{ host.oob_address }}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset"
        method: POST
        user: "{{ host.oob_username }}"
        password: "{{ host.oob_password }}"
        body_format: json
        body:
          ResetType: "ForceRestart"
        force_basic_auth: yes
        validate_certs: "{{ verify_ssl }}"
        status_code: [200, 202, 204]
        headers:
          Content-Type: "application/json"
      loop: "{{ pxe_hosts }}"
      loop_control:
        loop_var: host
        pause: "{{ boot_wait_time }}"
      register: restart_result
      when:
        - host.oob_address is defined
        - boot_device_result is defined

    - name: Display boot results
      debug:
        msg:
          - "========================================="
          - "PXE Boot Triggered"
          - "========================================="
          - "Servers are now restarting and will PXE boot"
          - ""
          - "Monitor progress:"
          - "  - Check dnsmasq DHCP logs: journalctl -u dnsmasq -f"
          - "  - Check TFTP transfers: journalctl -u dnsmasq | grep TFTP"
          - "  - Verify nodes boot into Talos maintenance mode"
          - ""
          - "Next steps:"
          - "  1. Wait for all nodes to PXE boot (2-5 minutes)"
          - "  2. Run: ansible-playbook -i inventory.yml deploy-talos-cluster.yml"
          - "========================================="

    - name: Create boot log
      copy:
        content: |
          # PXE Boot Trigger Log

          Triggered: {{ ansible_date_time.iso8601 }}
          By: {{ ansible_env.USER }}@{{ ansible_hostname }}

          ## Servers Triggered

          {% for host in pxe_hosts %}
          - {{ host.name }} ({{ host.ip }})
            - OOB: {{ host.oob_address }}
            - Type: {{ host.oob_type }}
            - Role: {{ host.role }}
          {% endfor %}

          ## Boot Status

          {% for result in boot_result.results %}
          {% if result.failed | default(false) %}
          - {{ result.host.name }}: FAILED - {{ result.msg | default('Unknown error') }}
          {% else %}
          - {{ result.host.name }}: SUCCESS
          {% endif %}
          {% endfor %}

          ## Monitoring Commands

          ```bash
          # Watch DHCP requests
          sudo journalctl -u dnsmasq -f | grep DHCP

          # Watch TFTP downloads
          sudo journalctl -u dnsmasq -f | grep TFTP

          # Check what IPs have been assigned
          sudo cat /var/lib/misc/dnsmasq.leases
          ```

          ## Next Steps

          Once all nodes have PXE booted into Talos maintenance mode:

          ```bash
          ansible-playbook -i inventory.yml deploy-talos-cluster.yml
          ```
        dest: "{{ playbook_dir }}/pxe-boot-{{ ansible_date_time.epoch }}.log"
        mode: '0644'

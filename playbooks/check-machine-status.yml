---
- name: Check Status of All Machines in Inventory
  hosts: localhost
  gather_facts: false
  vars:
    talosconfig_path: "{{ playbook_dir }}/../talos-configs/talosconfig"
    status_results: []

  tasks:
    - name: Check if talosctl is available
      ansible.builtin.command: which talosctl
      register: talosctl_check
      failed_when: false
      changed_when: false

    - name: Fail if talosctl is not installed
      ansible.builtin.fail:
        msg: "talosctl is not installed or not in PATH. Please install it first."
      when: talosctl_check.rc != 0

    - name: Check if talosconfig exists
      ansible.builtin.stat:
        path: "{{ talosconfig_path }}"
      register: talosconfig_stat

    - name: Display talosconfig status
      ansible.builtin.debug:
        msg: "Talosconfig found at {{ talosconfig_path }}"
      when: talosconfig_stat.stat.exists

    - name: Display warning if no talosconfig
      ansible.builtin.debug:
        msg: "No talosconfig found - will only attempt insecure checks"
      when: not talosconfig_stat.stat.exists

    - name: Check basic connectivity (ping)
      ansible.builtin.command: ping -c 2 -W 2 {{ item.ip }}
      register: ping_status
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false

    - name: Detect mode for each host (check insecure version first)
      ansible.builtin.shell: |
        timeout 10 talosctl version --insecure --nodes {{ item.ip }} --short 2>&1 || true
      register: mode_detection
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false

    - name: Check version for secured hosts (authenticated)
      ansible.builtin.shell: |
        timeout 10 talosctl version --nodes {{ item.item.ip }} --endpoints {{ item.item.ip }} --talosconfig {{ talosconfig_path }} --short 2>&1 || true
      register: authenticated_version
      loop: "{{ mode_detection.results }}"
      changed_when: false
      failed_when: false
      when:
        - talosconfig_stat.stat.exists
        - item.stdout is defined
        - "'certificate required' in item.stdout.lower() or 'tls:' in item.stdout.lower()"

    - name: Check health for secured hosts (authenticated)
      ansible.builtin.shell: |
        timeout 10 talosctl health --nodes {{ item.item.ip }} --endpoints {{ item.item.ip }} --talosconfig {{ talosconfig_path }} 2>&1 || true
      register: authenticated_health
      loop: "{{ mode_detection.results }}"
      changed_when: false
      failed_when: false
      when:
        - talosconfig_stat.stat.exists
        - item.stdout is defined
        - "'certificate required' in item.stdout.lower() or 'tls:' in item.stdout.lower()"

    - name: Check services for secured hosts (authenticated)
      ansible.builtin.shell: |
        timeout 5 talosctl services --nodes {{ item.item.ip }} --endpoints {{ item.item.ip }} --talosconfig {{ talosconfig_path }} 2>&1 || true
      register: authenticated_services
      loop: "{{ mode_detection.results }}"
      changed_when: false
      failed_when: false
      when:
        - talosconfig_stat.stat.exists
        - item.stdout is defined
        - "'certificate required' in item.stdout.lower() or 'tls:' in item.stdout.lower()"

    - name: Check machine config for secured hosts (authenticated)
      ansible.builtin.shell: |
        timeout 5 talosctl get machineconfig --nodes {{ item.item.ip }} --endpoints {{ item.item.ip }} --talosconfig {{ talosconfig_path }} 2>&1 || true
      register: authenticated_machineconfig
      loop: "{{ mode_detection.results }}"
      changed_when: false
      failed_when: false
      when:
        - talosconfig_stat.stat.exists
        - item.stdout is defined
        - "'certificate required' in item.stdout.lower() or 'tls:' in item.stdout.lower()"

    - name: Check health for insecure hosts (maintenance mode)
      ansible.builtin.shell: |
        timeout 10 talosctl health --nodes {{ item.item.ip }} 2>&1 || true
      register: insecure_health
      loop: "{{ mode_detection.results }}"
      changed_when: false
      failed_when: false
      when:
        - item.stdout is defined
        - "'certificate required' not in item.stdout.lower()"
        - "'tls:' not in item.stdout.lower()"

    - name: Check services for insecure hosts (maintenance mode)
      ansible.builtin.shell: |
        timeout 5 talosctl services --nodes {{ item.item.ip }} 2>&1 || true
      register: insecure_services
      loop: "{{ mode_detection.results }}"
      changed_when: false
      failed_when: false
      when:
        - item.stdout is defined
        - "'certificate required' not in item.stdout.lower()"
        - "'tls:' not in item.stdout.lower()"

    - name: Check machine config for insecure hosts (maintenance mode)
      ansible.builtin.shell: |
        timeout 5 talosctl get machineconfig --nodes {{ item.item.ip }} 2>&1 || true
      register: insecure_machineconfig
      loop: "{{ mode_detection.results }}"
      changed_when: false
      failed_when: false
      when:
        - item.stdout is defined
        - "'certificate required' not in item.stdout.lower()"
        - "'tls:' not in item.stdout.lower()"

    - name: Build status summary
      ansible.builtin.set_fact:
        status_results: "{{ status_results + [result] }}"
      loop: "{{ pxe_hosts }}"
      loop_control:
        index_var: idx
      vars:
        ping_result: "{{ ping_status.results[idx] }}"
        mode_check: "{{ mode_detection.results[idx] }}"
        is_secured: "{{ mode_check.stdout is defined and ('certificate required' in mode_check.stdout.lower() or 'tls:' in mode_check.stdout.lower()) }}"
        # Find matching results from sparse arrays
        auth_ver_result: "{{ authenticated_version.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first | default({}) }}"
        auth_health_result: "{{ authenticated_health.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first | default({}) }}"
        auth_services_result: "{{ authenticated_services.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first | default({}) }}"
        auth_mconfig_result: "{{ authenticated_machineconfig.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first | default({}) }}"
        insec_health_result: "{{ insecure_health.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first | default({}) }}"
        insec_services_result: "{{ insecure_services.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first | default({}) }}"
        insec_mconfig_result: "{{ insecure_machineconfig.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first | default({}) }}"
        # Select the right version based on mode
        version_output: "{{ auth_ver_result.stdout if is_secured else mode_check.stdout }}"
        health_output: "{{ auth_health_result.stdout if is_secured else insec_health_result.stdout }}"
        services_output: "{{ auth_services_result.stdout if is_secured else insec_services_result.stdout }}"
        mconfig_output: "{{ auth_mconfig_result.stdout if is_secured else insec_mconfig_result.stdout }}"
        result:
          hostname: "{{ item.name }}"
          ip: "{{ item.ip }}"
          role: "{{ item.role }}"
          mode: "{{ 'SECURED' if is_secured else 'INSECURE' }}"
          ping: "{{ 'UP' if ping_result.rc == 0 else 'DOWN' }}"
          stage: >-
            {{
              'RUNNING_CONFIGURED' if (
                is_secured or
                (mconfig_output is defined and 'v1alpha1.MachineConfig' in mconfig_output)
              )
              else ('MAINTENANCE' if (
                (health_output is defined and 'maintenance mode' in health_output.lower()) or
                (version_output is defined and 'maintenance mode' in version_output.lower()) or
                (mconfig_output is defined and 'maintenance mode' in mconfig_output.lower())
              )
              else ('RUNNING_UNCONFIGURED' if (version_output is defined and 'Talos' in version_output and 'maintenance mode' not in version_output.lower())
              else ('UNREACHABLE' if ping_result.rc == 0 else 'DOWN')))
            }}
          has_config: >-
            {{
              'YES' if (mconfig_output is defined and 'v1alpha1.MachineConfig' in mconfig_output)
              else ('NO' if (mconfig_output is defined and ('not found' in mconfig_output.lower() or 'maintenance mode' in mconfig_output.lower()))
              else 'UNKNOWN')
            }}
          health_status: >-
            {{
              'HEALTHY' if (health_output is defined and 'is healthy' in health_output)
              else ('MAINTENANCE' if (health_output is defined and 'maintenance mode' in health_output.lower())
              else ('ERROR' if (health_output is defined and health_output != '')
              else 'NO_RESPONSE'))
            }}
          error_summary: >-
            {{
              (health_output | regex_search('error:.*', ignorecase=True) | default(''))
              | regex_replace('^error:\s*', '', ignorecase=True) | trim
              if (health_output is defined and 'error' in health_output.lower())
              else (version_output | regex_search('error.*', ignorecase=True) | default('') | trim
              if (version_output is defined and 'error' in version_output.lower())
              else '')
            }}
          version: >-
            {{
              (version_output | regex_search('Talos v[0-9.]+') | default(''))
              if (version_output is defined and 'Talos' in version_output)
              else ''
            }}
          services_running: >-
            {{
              (services_output | regex_findall('Running', ignorecase=True) | length)
              if (services_output is defined and services_output != '')
              else 0
            }}

    - name: Generate summary statistics
      ansible.builtin.set_fact:
        ping_up: "{{ status_results | selectattr('ping', 'equalto', 'UP') | list | length }}"
        ping_down: "{{ status_results | selectattr('ping', 'equalto', 'DOWN') | list | length }}"
        hosts_healthy: "{{ status_results | selectattr('health_status', 'equalto', 'HEALTHY') | list | length }}"
        secured_hosts: "{{ status_results | selectattr('mode', 'equalto', 'SECURED') | list | length }}"
        insecure_hosts: "{{ status_results | selectattr('mode', 'equalto', 'INSECURE') | list | length }}"

    - name: Save raw outputs to file for debugging
      ansible.builtin.copy:
        dest: "/tmp/talos-raw-output-{{ item.name | regex_replace('\\..*', '') }}.txt"
        content: |
          Host: {{ item.name }} ({{ item.ip }})
          ================================================================================

          MODE DETECTION (version check):
          {{ mode_detection.results[idx].stdout }}
          {{ mode_detection.results[idx].stderr }}

          {% if status_results[idx].mode == 'SECURED' %}
          AUTHENTICATED CHECKS:

          Health Check:
          {{ (authenticated_health.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first).stdout | default('N/A') }}

          Version Check:
          {{ (authenticated_version.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first).stdout | default('N/A') }}

          Machine Config:
          {{ (authenticated_machineconfig.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first).stdout | default('N/A') }}

          Services:
          {{ (authenticated_services.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first).stdout | default('N/A') }}
          {% else %}
          INSECURE CHECKS:

          Health Check:
          {{ (insecure_health.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first).stdout | default('N/A') }}

          Machine Config:
          {{ (insecure_machineconfig.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first).stdout | default('N/A') }}

          Services:
          {{ (insecure_services.results | selectattr('item.item.ip', 'equalto', item.ip) | list | first).stdout | default('N/A') }}
          {% endif %}
      loop: "{{ pxe_hosts }}"
      loop_control:
        index_var: idx
        label: "{{ item.name }}"

    - name: Display detailed status for each host
      ansible.builtin.debug:
        msg:
          - "================================================================================"
          - "Host: {{ item.hostname }}"
          - "  IP: {{ item.ip }} | Role: {{ item.role }} | Network: {{ item.ping }}"
          - "  Mode: {{ item.mode }} | Stage: {{ item.stage }} | Has Config: {{ item.has_config }}"
          - "  Version: {{ item.version if item.version else 'N/A' }}"
          - "  Health: {{ item.health_status }}"
          - "{% if item.error_summary %}  Error: {{ item.error_summary }}{% endif %}"
          - "  Raw output saved to: /tmp/talos-raw-output-{{ item.hostname | regex_replace('\\..*', '') }}.txt"
          - "================================================================================"
      loop: "{{ status_results }}"
      loop_control:
        label: "{{ item.hostname }}"

    - name: Display summary
      ansible.builtin.debug:
        msg:
          - ""
          - "================================================================================"
          - "SUMMARY - {{ pxe_hosts | length }} Total Hosts"
          - "================================================================================"
          - "Network: {{ ping_up }} UP / {{ ping_down }} DOWN"
          - ""
          - "Mode:"
          - "  Secured (TLS):  {{ secured_hosts }}"
          - "  Insecure:       {{ insecure_hosts }}"
          - ""
          - "Health:"
          - "  Healthy: {{ hosts_healthy }}"
          - ""
          - "Stages:"
          - "  Maintenance:          {{ status_results | selectattr('stage', 'equalto', 'MAINTENANCE') | list | length }}"
          - "  Running (Configured): {{ status_results | selectattr('stage', 'equalto', 'RUNNING_CONFIGURED') | list | length }}"
          - "  Running (No Config):  {{ status_results | selectattr('stage', 'equalto', 'RUNNING_UNCONFIGURED') | list | length }}"
          - "  Unreachable:          {{ status_results | selectattr('stage', 'equalto', 'UNREACHABLE') | list | length }}"
          - "  Down:                 {{ status_results | selectattr('stage', 'equalto', 'DOWN') | list | length }}"
          - ""
          - "Machine Config:"
          - "  Has Config: {{ status_results | selectattr('has_config', 'equalto', 'YES') | list | length }}"
          - "  No Config:  {{ status_results | selectattr('has_config', 'equalto', 'NO') | list | length }}"
          - "================================================================================"

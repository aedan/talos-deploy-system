---
- name: Check Status of All Machines in Inventory
  hosts: localhost
  gather_facts: false
  vars:
    talosconfig_path: "{{ playbook_dir }}/../talos-configs/talosconfig"
    status_results: []

  tasks:
    - name: Check if talosctl is available
      ansible.builtin.command: which talosctl
      register: talosctl_check
      failed_when: false
      changed_when: false

    - name: Fail if talosctl is not installed
      ansible.builtin.fail:
        msg: "talosctl is not installed or not in PATH. Please install it first."
      when: talosctl_check.rc != 0

    - name: Check if talosconfig exists
      ansible.builtin.stat:
        path: "{{ talosconfig_path }}"
      register: talosconfig_stat

    - name: Display talosconfig status
      ansible.builtin.debug:
        msg: "Talosconfig found at {{ talosconfig_path }}"
      when: talosconfig_stat.stat.exists

    - name: Display warning if no talosconfig
      ansible.builtin.debug:
        msg: "No talosconfig found - will only attempt insecure checks"
      when: not talosconfig_stat.stat.exists

    - name: Check status for each host (insecure)
      ansible.builtin.shell: |
        timeout 10 talosctl health --insecure --nodes {{ item.ip }} 2>&1 || true
      register: insecure_status
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false

    - name: Check status for each host (authenticated)
      ansible.builtin.shell: |
        timeout 10 talosctl health --nodes {{ item.ip }} --talosconfig {{ talosconfig_path }} 2>&1 || true
      register: authenticated_status
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false
      when: talosconfig_stat.stat.exists

    - name: Check version for each host (insecure)
      ansible.builtin.shell: |
        timeout 10 talosctl version --insecure --nodes {{ item.ip }} --short 2>&1 || true
      register: insecure_version
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false

    - name: Check version for each host (authenticated)
      ansible.builtin.shell: |
        timeout 10 talosctl version --nodes {{ item.ip }} --talosconfig {{ talosconfig_path }} --short 2>&1 || true
      register: authenticated_version
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false
      when: talosconfig_stat.stat.exists

    - name: Check basic connectivity (ping)
      ansible.builtin.command: ping -c 2 -W 2 {{ item.ip }}
      register: ping_status
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false

    - name: Build status summary
      ansible.builtin.set_fact:
        status_results: "{{ status_results + [result] }}"
      loop: "{{ pxe_hosts }}"
      loop_control:
        index_var: idx
      vars:
        ping_result: "{{ ping_status.results[idx] }}"
        insecure_health: "{{ insecure_status.results[idx] }}"
        auth_health: "{{ authenticated_status.results[idx] if talosconfig_stat.stat.exists else {} }}"
        insecure_ver: "{{ insecure_version.results[idx] }}"
        auth_ver: "{{ authenticated_version.results[idx] if talosconfig_stat.stat.exists else {} }}"
        result:
          hostname: "{{ item.name }}"
          ip: "{{ item.ip }}"
          role: "{{ item.role }}"
          ping: "{{ 'UP' if ping_result.rc == 0 else 'DOWN' }}"
          mode: >-
            {{
              'MAINTENANCE' if (insecure_health.stdout is defined and 'maintenance mode' in insecure_health.stdout.lower())
              else ('CONFIGURED' if (auth_health.stdout is defined and 'is healthy' in auth_health.stdout)
              else ('UNCONFIGURED' if (insecure_health.stdout is defined and 'is healthy' in insecure_health.stdout)
              else 'UNREACHABLE'))
            }}
          insecure_health: >-
            {{
              'HEALTHY' if (insecure_health.stdout is defined and 'is healthy' in insecure_health.stdout)
              else ('MAINTENANCE' if (insecure_health.stdout is defined and 'maintenance mode' in insecure_health.stdout.lower())
              else ('UNHEALTHY' if (insecure_health.stdout is defined and insecure_health.stdout != '')
              else 'NO_RESPONSE'))
            }}
          authenticated_health: >-
            {{
              'HEALTHY' if (auth_health.stdout is defined and 'is healthy' in auth_health.stdout)
              else ('UNHEALTHY' if (auth_health.stdout is defined and auth_health.stdout != '')
              else ('NO_RESPONSE' if talosconfig_stat.stat.exists else 'N/A'))
            }}
          insecure_error: >-
            {{
              insecure_health.stderr | trim if (insecure_health.stderr is defined and insecure_health.stderr)
              else (insecure_health.stdout | trim if (insecure_health.stdout is defined and 'error' in insecure_health.stdout.lower())
              else '')
            }}
          auth_error: >-
            {{
              auth_health.stderr | trim if (auth_health.stderr is defined and auth_health.stderr)
              else (auth_health.stdout | trim if (auth_health.stdout is defined and 'error' in auth_health.stdout.lower())
              else ('N/A' if not talosconfig_stat.stat.exists else ''))
            }}
          insecure_version: >-
            {{
              (insecure_ver.stdout | regex_search('Server:.*', multiline=True) | default('') | regex_replace('^Server:\s*', '') | trim)
              if (insecure_ver.stdout is defined and 'Server:' in insecure_ver.stdout)
              else ''
            }}
          authenticated_version: >-
            {{
              (auth_ver.stdout | regex_search('Server:.*', multiline=True) | default('') | regex_replace('^Server:\s*', '') | trim)
              if (auth_ver.stdout is defined and 'Server:' in auth_ver.stdout)
              else ('' if talosconfig_stat.stat.exists else 'N/A')
            }}

    - name: Generate summary statistics
      ansible.builtin.set_fact:
        ping_up: "{{ status_results | selectattr('ping', 'equalto', 'UP') | list | length }}"
        ping_down: "{{ status_results | selectattr('ping', 'equalto', 'DOWN') | list | length }}"
        insecure_healthy: "{{ status_results | selectattr('insecure_health', 'equalto', 'HEALTHY') | list | length }}"
        auth_healthy: "{{ status_results | selectattr('authenticated_health', 'equalto', 'HEALTHY') | list | length }}"

    - name: Create status report file
      ansible.builtin.copy:
        dest: "/tmp/talos-status-report.txt"
        content: |
          ================================================================================
          TALOS MACHINE STATUS REPORT
          ================================================================================
          Generated: {{ now(utc=true).isoformat() }}
          Total Hosts: {{ pxe_hosts | length }}
          ================================================================================

          {% for host in status_results %}
          Host: {{ host.hostname }}
            IP:                {{ host.ip }}
            Role:              {{ host.role }}
            Ping:              {{ host.ping }}
            Mode:              {{ host.mode }}
            Insecure Health:   {{ host.insecure_health }}
            {% if host.insecure_version %}
            Insecure Version:  {{ host.insecure_version }}
            {% endif %}
            {% if host.insecure_error %}
            Insecure Error:    {{ host.insecure_error }}
            {% endif %}
            Auth Health:       {{ host.authenticated_health }}
            {% if host.authenticated_version and host.authenticated_version != 'N/A' %}
            Auth Version:      {{ host.authenticated_version }}
            {% endif %}
            {% if host.auth_error and host.auth_error != 'N/A' %}
            Auth Error:        {{ host.auth_error }}
            {% endif %}

          {% endfor %}
          ================================================================================
          SUMMARY
          ================================================================================
          Network Connectivity:
            Reachable (ping):        {{ ping_up }}/{{ pxe_hosts | length }}
            Unreachable:             {{ ping_down }}/{{ pxe_hosts | length }}

          Talos Health (Insecure):
            Healthy:                 {{ insecure_healthy }}/{{ pxe_hosts | length }}

          Talos Health (Authenticated):
            Healthy:                 {{ auth_healthy }}/{{ pxe_hosts | length }}

          Node Modes:
            Maintenance:             {{ status_results | selectattr('mode', 'equalto', 'MAINTENANCE') | list | length }}
            Configured:              {{ status_results | selectattr('mode', 'equalto', 'CONFIGURED') | list | length }}
            Unconfigured:            {{ status_results | selectattr('mode', 'equalto', 'UNCONFIGURED') | list | length }}
            Unreachable:             {{ status_results | selectattr('mode', 'equalto', 'UNREACHABLE') | list | length }}
          ================================================================================

    - name: Display status report
      ansible.builtin.command: cat /tmp/talos-status-report.txt
      register: report_output
      changed_when: false

    - name: Show report
      ansible.builtin.debug:
        msg: "{{ report_output.stdout_lines }}"

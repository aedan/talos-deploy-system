---
- name: Check Status of All Machines in Inventory
  hosts: localhost
  gather_facts: false
  vars:
    talosconfig_path: "{{ playbook_dir }}/../talos-configs/talosconfig"
    status_results: []

  tasks:
    - name: Check if talosctl is available
      ansible.builtin.command: which talosctl
      register: talosctl_check
      failed_when: false
      changed_when: false

    - name: Fail if talosctl is not installed
      ansible.builtin.fail:
        msg: "talosctl is not installed or not in PATH. Please install it first."
      when: talosctl_check.rc != 0

    - name: Check if talosconfig exists
      ansible.builtin.stat:
        path: "{{ talosconfig_path }}"
      register: talosconfig_stat

    - name: Display talosconfig status
      ansible.builtin.debug:
        msg: "Talosconfig found at {{ talosconfig_path }}"
      when: talosconfig_stat.stat.exists

    - name: Display warning if no talosconfig
      ansible.builtin.debug:
        msg: "No talosconfig found - will only attempt insecure checks"
      when: not talosconfig_stat.stat.exists

    - name: Check status for each host (without auth)
      ansible.builtin.shell: |
        timeout 10 talosctl health --nodes {{ item.ip }} 2>&1 || true
      register: insecure_status
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false

    - name: Check status for each host (authenticated)
      ansible.builtin.shell: |
        timeout 10 talosctl health --nodes {{ item.ip }} --talosconfig {{ talosconfig_path }} 2>&1 || true
      register: authenticated_status
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false
      when: talosconfig_stat.stat.exists

    - name: Check version for each host (insecure)
      ansible.builtin.shell: |
        timeout 10 talosctl version --insecure --nodes {{ item.ip }} --short 2>&1 || true
      register: insecure_version
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false

    - name: Check version for each host (authenticated)
      ansible.builtin.shell: |
        timeout 10 talosctl version --nodes {{ item.ip }} --talosconfig {{ talosconfig_path }} --short 2>&1 || true
      register: authenticated_version
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false
      when: talosconfig_stat.stat.exists

    - name: Check basic connectivity (ping)
      ansible.builtin.command: ping -c 2 -W 2 {{ item.ip }}
      register: ping_status
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false

    - name: Check machine config status (without auth)
      ansible.builtin.shell: |
        timeout 5 talosctl get machineconfig --nodes {{ item.ip }} 2>&1 || true
      register: machineconfig_status
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false

    - name: Check services status (without auth)
      ansible.builtin.shell: |
        timeout 5 talosctl services --nodes {{ item.ip }} 2>&1 || true
      register: services_status
      loop: "{{ pxe_hosts }}"
      changed_when: false
      failed_when: false

    - name: Build status summary
      ansible.builtin.set_fact:
        status_results: "{{ status_results + [result] }}"
      loop: "{{ pxe_hosts }}"
      loop_control:
        index_var: idx
      vars:
        ping_result: "{{ ping_status.results[idx] }}"
        insecure_health: "{{ insecure_status.results[idx] }}"
        auth_health: "{{ authenticated_status.results[idx] if talosconfig_stat.stat.exists else {} }}"
        insecure_ver: "{{ insecure_version.results[idx] }}"
        auth_ver: "{{ authenticated_version.results[idx] if talosconfig_stat.stat.exists else {} }}"
        mconfig: "{{ machineconfig_status.results[idx] }}"
        services: "{{ services_status.results[idx] }}"
        result:
          hostname: "{{ item.name }}"
          ip: "{{ item.ip }}"
          role: "{{ item.role }}"
          ping: "{{ 'UP' if ping_result.rc == 0 else 'DOWN' }}"
          stage: >-
            {{
              'RUNNING_CONFIGURED' if (
                (auth_health.stdout is defined and 'is healthy' in auth_health.stdout) or
                (auth_ver.stdout is defined and 'Talos' in auth_ver.stdout) or
                (insecure_ver.stdout is defined and ('certificate required' in insecure_ver.stdout.lower() or 'tls:' in insecure_ver.stdout.lower()))
              )
              else ('MAINTENANCE' if (
                (insecure_health.stdout is defined and 'maintenance mode' in insecure_health.stdout.lower()) or
                (insecure_ver.stdout is defined and 'maintenance mode' in insecure_ver.stdout.lower()) or
                (mconfig.stdout is defined and 'maintenance mode' in mconfig.stdout.lower())
              )
              else ('RUNNING_UNCONFIGURED' if (insecure_ver.stdout is defined and 'Talos' in insecure_ver.stdout and 'maintenance mode' not in insecure_ver.stdout.lower())
              else ('BOOTING' if (services.stdout is defined and services.stdout != '' and 'apid' not in services.stdout)
              else ('UNREACHABLE' if ping_result.rc == 0 else 'DOWN'))))
            }}
          has_config: >-
            {{
              'YES' if (mconfig.stdout is defined and 'v1alpha1.MachineConfig' in mconfig.stdout)
              else ('NO' if (mconfig.stdout is defined and ('not found' in mconfig.stdout.lower() or 'maintenance mode' in mconfig.stdout.lower()))
              else 'UNKNOWN')
            }}
          insecure_health: >-
            {{
              'HEALTHY' if (insecure_health.stdout is defined and 'is healthy' in insecure_health.stdout)
              else ('MAINTENANCE' if (insecure_health.stdout is defined and 'maintenance mode' in insecure_health.stdout.lower())
              else ('ERROR' if (insecure_health.stdout is defined and insecure_health.stdout != '')
              else 'NO_RESPONSE'))
            }}
          authenticated_health: >-
            {{
              'HEALTHY' if (auth_health.stdout is defined and 'is healthy' in auth_health.stdout)
              else ('ERROR' if (auth_health.stdout is defined and auth_health.stdout != '')
              else ('NO_RESPONSE' if talosconfig_stat.stat.exists else 'N/A'))
            }}
          error_summary: >-
            {{
              (insecure_health.stdout | regex_search('error:.*', ignorecase=True) | default(''))
              | regex_replace('^error:\s*', '', ignorecase=True) | trim
              if (insecure_health.stdout is defined and 'error' in insecure_health.stdout.lower())
              else (insecure_ver.stdout | regex_search('error.*', ignorecase=True) | default('') | trim
              if (insecure_ver.stdout is defined and 'error' in insecure_ver.stdout.lower())
              else '')
            }}
          version: >-
            {{
              (insecure_ver.stdout | regex_search('Talos v[0-9.]+') | default(''))
              if (insecure_ver.stdout is defined and 'Talos' in insecure_ver.stdout)
              else ''
            }}
          services_running: >-
            {{
              (services.stdout | regex_findall('Running', ignorecase=True) | length)
              if (services.stdout is defined and services.stdout != '')
              else 0
            }}

    - name: Generate summary statistics
      ansible.builtin.set_fact:
        ping_up: "{{ status_results | selectattr('ping', 'equalto', 'UP') | list | length }}"
        ping_down: "{{ status_results | selectattr('ping', 'equalto', 'DOWN') | list | length }}"
        insecure_healthy: "{{ status_results | selectattr('insecure_health', 'equalto', 'HEALTHY') | list | length }}"
        auth_healthy: "{{ status_results | selectattr('authenticated_health', 'equalto', 'HEALTHY') | list | length }}"

    - name: Save raw outputs to file for debugging
      ansible.builtin.copy:
        dest: "/tmp/talos-raw-output-{{ item.name | regex_replace('\\..*', '') }}.txt"
        content: |
          Host: {{ item.name }} ({{ item.ip }})
          ================================================================================

          HEALTH CHECK (INSECURE):
          {{ insecure_status.results[idx].stdout }}
          {{ insecure_status.results[idx].stderr }}

          VERSION CHECK (INSECURE):
          {{ insecure_version.results[idx].stdout }}
          {{ insecure_version.results[idx].stderr }}

          MACHINE CONFIG STATUS:
          {{ machineconfig_status.results[idx].stdout }}
          {{ machineconfig_status.results[idx].stderr }}

          SERVICES STATUS:
          {{ services_status.results[idx].stdout }}
          {{ services_status.results[idx].stderr }}
      loop: "{{ pxe_hosts }}"
      loop_control:
        index_var: idx
        label: "{{ item.name }}"

    - name: Display detailed status for each host
      ansible.builtin.debug:
        msg:
          - "================================================================================"
          - "Host: {{ item.hostname }}"
          - "  IP: {{ item.ip }} | Role: {{ item.role }} | Network: {{ item.ping }}"
          - "  Stage: {{ item.stage }} | Has Config: {{ item.has_config }}"
          - "  Version: {{ item.version if item.version else 'N/A' }}"
          - "  Insecure Health: {{ item.insecure_health }} | Auth Health: {{ item.authenticated_health }}"
          - "{% if item.error_summary %}  Error: {{ item.error_summary }}{% endif %}"
          - "  Raw output saved to: /tmp/talos-raw-output-{{ item.hostname | regex_replace('\\..*', '') }}.txt"
          - "================================================================================"
      loop: "{{ status_results }}"
      loop_control:
        label: "{{ item.hostname }}"

    - name: Display summary
      ansible.builtin.debug:
        msg:
          - ""
          - "================================================================================"
          - "SUMMARY - {{ pxe_hosts | length }} Total Hosts"
          - "================================================================================"
          - "Network: {{ ping_up }} UP / {{ ping_down }} DOWN"
          - ""
          - "Stages:"
          - "  Maintenance:          {{ status_results | selectattr('stage', 'equalto', 'MAINTENANCE') | list | length }}"
          - "  Running (Configured): {{ status_results | selectattr('stage', 'equalto', 'RUNNING_CONFIGURED') | list | length }}"
          - "  Running (No Config):  {{ status_results | selectattr('stage', 'equalto', 'RUNNING_UNCONFIGURED') | list | length }}"
          - "  Booting:              {{ status_results | selectattr('stage', 'equalto', 'BOOTING') | list | length }}"
          - "  Unreachable:          {{ status_results | selectattr('stage', 'equalto', 'UNREACHABLE') | list | length }}"
          - "  Down:                 {{ status_results | selectattr('stage', 'equalto', 'DOWN') | list | length }}"
          - ""
          - "Machine Config:"
          - "  Has Config: {{ status_results | selectattr('has_config', 'equalto', 'YES') | list | length }}"
          - "  No Config:  {{ status_results | selectattr('has_config', 'equalto', 'NO') | list | length }}"
          - "================================================================================"

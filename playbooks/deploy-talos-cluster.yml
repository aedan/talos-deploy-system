---
- name: Deploy Talos Linux cluster
  hosts: localhost
  gather_facts: yes
  vars:
    talos_config_dir: "{{ playbook_dir }}/../talos-configs"
    talos_secrets_file: "{{ talos_config_dir }}/secrets.yaml"
    talosconfig_file: "{{ talos_config_dir }}/talosconfig"
    kubeconfig_dest: "{{ ansible_env.HOME }}/.kube/config"
    apply_timeout: 600  # 10 minutes for config application
    bootstrap_timeout: 900  # 15 minutes for bootstrap

  tasks:
    - name: Verify talos-configs directory exists
      stat:
        path: "{{ talos_config_dir }}"
      register: config_dir_stat
      failed_when: not config_dir_stat.stat.exists

    - name: Verify secrets file exists
      stat:
        path: "{{ talos_secrets_file }}"
      register: secrets_stat
      failed_when: not secrets_stat.stat.exists

    - name: Verify talosconfig exists
      stat:
        path: "{{ talosconfig_file }}"
      register: talosconfig_stat
      failed_when: not talosconfig_stat.stat.exists

    - name: Filter control plane and worker nodes
      set_fact:
        controlplane_hosts: "{{ pxe_hosts | selectattr('role', 'equalto', 'controlplane') | list }}"
        worker_hosts: "{{ pxe_hosts | selectattr('role', 'equalto', 'worker') | list }}"
        first_controlplane: "{{ (pxe_hosts | selectattr('role', 'equalto', 'controlplane') | list)[0] }}"

    - name: Display deployment plan
      debug:
        msg:
          - "========================================="
          - "Talos Cluster Deployment Plan"
          - "========================================="
          - "Control Plane Nodes: {{ controlplane_hosts | length }}"
          - "{% for host in controlplane_hosts %}  - {{ host.name }} ({{ host.ip }})\n{% endfor %}"
          - "Worker Nodes: {{ worker_hosts | length }}"
          - "{% for host in worker_hosts %}  - {{ host.name }} ({{ host.ip }})\n{% endfor %}"
          - "Bootstrap Node: {{ first_controlplane.name }} ({{ first_controlplane.ip }})"
          - "========================================="

    - name: Pause for user confirmation
      pause:
        prompt: |

          This will apply Talos configurations to all nodes and bootstrap the cluster.
          Make sure all nodes have been PXE booted into Talos maintenance mode.

          Press ENTER to continue or Ctrl+C to abort...

    # Apply configurations to ALL nodes (control plane + workers)
    - name: Apply configuration to all nodes (insecure mode)
      command: >
        talosctl apply-config
        --insecure
        --nodes {{ host.ip }}
        --file {{ talos_config_dir }}/{{ host.name.split('.')[0] }}.yaml
      loop: "{{ pxe_hosts }}"
      loop_control:
        loop_var: host
      register: apply_all_insecure
      ignore_errors: yes
      async: "{{ apply_timeout }}"
      poll: 10
      no_log: true

    - name: Apply configuration to already-configured nodes (authenticated mode)
      command: >
        talosctl apply-config
        --nodes {{ item.host.ip }}
        --endpoints {{ item.host.ip }}
        --file {{ talos_config_dir }}/{{ item.host.name.split('.')[0] }}.yaml
        --talosconfig {{ talosconfig_file }}
      loop: "{{ apply_all_insecure.results }}"
      when: item.rc != 0
      register: apply_all_auth
      ignore_errors: yes
      async: "{{ apply_timeout }}"
      poll: 10
      no_log: true

    - name: Wait for all nodes to apply configuration and reboot
      pause:
        seconds: 120
        prompt: "Waiting for all nodes to apply configuration and stabilize..."

    # Check if cluster is already bootstrapped
    - name: Check if cluster is already bootstrapped
      command: >
        talosctl get members
        --nodes {{ first_controlplane.ip }}
        --endpoints {{ first_controlplane.ip }}
        --talosconfig {{ talosconfig_file }}
      register: bootstrap_check
      failed_when: false
      changed_when: false

    - name: Bootstrap the cluster (first attempt)
      command: >
        talosctl bootstrap
        -e {{ first_controlplane.ip }}
        --talosconfig {{ talosconfig_file }}
        --nodes {{ first_controlplane.ip }}
      when: bootstrap_check.rc != 0
      register: bootstrap_result
      failed_when: false
      timeout: 300

    - name: Wait after first bootstrap
      pause:
        seconds: 90
        prompt: "Waiting for initial bootstrap to start etcd..."
      when: bootstrap_result.changed | default(false)

    - name: Bootstrap the cluster (second time - helps etcd stabilize)
      command: >
        talosctl bootstrap
        -e {{ first_controlplane.ip }}
        --talosconfig {{ talosconfig_file }}
        --nodes {{ first_controlplane.ip }}
      when: bootstrap_result.changed | default(false)
      register: bootstrap_retry
      failed_when: false
      timeout: 300

    - name: Wait for bootstrap to complete
      pause:
        seconds: 90
        prompt: "Waiting for bootstrap to complete and etcd to stabilize..."
      when: bootstrap_result.changed | default(false)

    - name: Wait for etcd to be healthy (first attempt - 5 minutes)
      command: >
        talosctl etcd members
        --nodes {{ first_controlplane.ip }}
        --endpoints {{ first_controlplane.ip }}
        --talosconfig {{ talosconfig_file }}
      register: etcd_check
      retries: 10
      delay: 30
      until: etcd_check.rc == 0
      failed_when: false

    - name: Bootstrap retry if etcd is not healthy
      block:
        - name: Display etcd failure message
          debug:
            msg: "etcd not healthy after 5 minutes, retrying bootstrap..."

        - name: Force bootstrap retry
          command: >
            talosctl bootstrap
            -e {{ first_controlplane.ip }}
            --talosconfig {{ talosconfig_file }}
            --nodes {{ first_controlplane.ip }}
          register: bootstrap_force_retry
          failed_when: false
          timeout: 300

        - name: Wait after forced bootstrap
          pause:
            seconds: 60
            prompt: "Waiting for forced bootstrap to take effect..."

        - name: Wait for etcd to be healthy (second attempt - 5 minutes)
          command: >
            talosctl etcd members
            --nodes {{ first_controlplane.ip }}
            --endpoints {{ first_controlplane.ip }}
            --talosconfig {{ talosconfig_file }}
          register: etcd_check_retry
          retries: 10
          delay: 30
          until: etcd_check_retry.rc == 0
          failed_when: etcd_check_retry.rc != 0
      when: etcd_check.rc != 0

    - name: Wait for Kubernetes API to respond
      command: >
        talosctl get members
        --nodes {{ first_controlplane.ip }}
        --endpoints {{ first_controlplane.ip }}
        --talosconfig {{ talosconfig_file }}
      register: api_check
      retries: 15
      delay: 20
      until: api_check.rc == 0

    - name: Create .kube directory
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'

    - name: Check if kubeconfig already exists
      stat:
        path: "{{ kubeconfig_dest }}"
      register: existing_kubeconfig

    - name: Backup existing kubeconfig
      copy:
        src: "{{ kubeconfig_dest }}"
        dest: "{{ kubeconfig_dest }}.backup.{{ ansible_date_time.epoch }}"
        mode: '0600'
        remote_src: yes
      when: existing_kubeconfig.stat.exists

    - name: Extract kubeconfig from cluster
      command: >
        talosctl kubeconfig
        --nodes {{ first_controlplane.ip }}
        --endpoints {{ first_controlplane.ip }}
        --talosconfig {{ talosconfig_file }}
        --force
        {{ kubeconfig_dest }}
      register: kubeconfig_extract

    - name: Set kubeconfig permissions
      file:
        path: "{{ kubeconfig_dest }}"
        mode: '0600'

    - name: Verify cluster access
      command: kubectl get nodes
      environment:
        KUBECONFIG: "{{ kubeconfig_dest }}"
      register: cluster_nodes
      retries: 5
      delay: 10
      until: cluster_nodes.rc == 0

    - name: Display cluster status
      debug:
        msg:
          - "NOTE: Nodes will show NotReady until CNI (kube-ovn) is installed"
          - "{{ cluster_nodes.stdout_lines }}"

    - name: Get cluster info
      command: kubectl cluster-info
      environment:
        KUBECONFIG: "{{ kubeconfig_dest }}"
      register: cluster_info

    - name: Create deployment summary
      copy:
        content: |
          # Talos Cluster Deployment Summary

          Deployment Date: {{ ansible_date_time.iso8601 }}
          Deployed By: {{ ansible_env.USER }}@{{ ansible_hostname }}

          ## Cluster Information
          - Cluster Name: {{ talos_cluster_name }}
          - Endpoint: {{ talos_cluster_endpoint }}
          - Kubernetes Version: {{ talos_kubernetes_version }}

          ## Nodes Deployed

          ### Control Plane Nodes
          {% for host in controlplane_hosts %}
          - {{ host.name }} ({{ host.ip }})
          {% endfor %}

          ### Worker Nodes
          {% for host in worker_hosts %}
          - {{ host.name }} ({{ host.ip }})
          {% endfor %}

          ## Access Information

          ### Talos Configuration
          - Talosconfig: {{ talosconfig_file }}
          - Usage: `export TALOSCONFIG={{ talosconfig_file }}`

          ### Kubernetes Configuration
          - Kubeconfig: {{ kubeconfig_dest }}
          - Usage: `export KUBECONFIG={{ kubeconfig_dest }}`

          ### Quick Access Commands
          ```bash
          # Check Talos nodes
          talosctl --talosconfig {{ talosconfig_file }} --nodes {{ first_controlplane.ip }} get members

          # Check Kubernetes nodes
          kubectl get nodes -o wide

          # View system pods
          kubectl get pods -A

          # Talos dashboard (if available)
          talosctl dashboard --nodes {{ first_controlplane.ip }} --talosconfig {{ talosconfig_file }}
          ```

          ## Current Cluster Status

          ```
          {{ cluster_nodes.stdout }}
          ```

          ## Cluster Info

          ```
          {{ cluster_info.stdout }}
          ```

          ## Next Steps

          **IMPORTANT:** Nodes will show NotReady status until CNI is installed.

          1. **Install kube-ovn CNI** (Cluster networking - REQUIRED)
             ```bash
             # Install kube-ovn
             # Follow kube-ovn installation instructions for your version
             # https://github.com/kubeovn/kube-ovn

             # Verify CNI is running
             kubectl get pods -n kube-system -l app=kube-ovn-cni

             # Wait for nodes to become Ready
             kubectl get nodes -w
             ```

          2. **Install Longhorn** (Storage)
             ```bash
             kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v1.7.2/deploy/longhorn.yaml

             # Wait for Longhorn to be ready
             kubectl -n longhorn-system get pods

             # Set as default storage class (optional)
             kubectl patch storageclass longhorn -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
             ```

          3. **Verify Cluster Health** (after CNI installation)
             ```bash
             # Check all nodes are Ready (will be NotReady without CNI)
             kubectl get nodes

             # Check all system pods are running
             kubectl get pods -A

             # Check etcd health via Talos
             talosctl --nodes {{ first_controlplane.ip }} etcd members
             ```

          4. **Deploy your applications**
             ```bash
             kubectl apply -f your-app.yaml
             ```

          ## Troubleshooting

          ### Check Talos Service Status
          ```bash
          talosctl --nodes {{ first_controlplane.ip }} services
          ```

          ### View Talos Logs
          ```bash
          # Kubelet logs
          talosctl --nodes {{ first_controlplane.ip }} logs kubelet

          # API server logs
          talosctl --nodes {{ first_controlplane.ip }} logs controller-runtime
          ```

          ### Check etcd Health
          ```bash
          talosctl --nodes {{ first_controlplane.ip }} etcd members
          ```

          ### Reset a Node (DANGER!)
          ```bash
          talosctl --nodes <node-ip> reset --graceful=false --reboot
          ```

          ## Backup Information

          {% if existing_kubeconfig.stat.exists %}
          Previous kubeconfig backed up to: {{ kubeconfig_dest }}.backup.{{ ansible_date_time.epoch }}
          {% else %}
          No previous kubeconfig found.
          {% endif %}

          ## Configuration Files
          - All Talos configs: {{ talos_config_dir }}/
          - Secrets: {{ talos_secrets_file }} (KEEP SECURE!)
        dest: "{{ talos_config_dir }}/DEPLOYMENT.md"
        mode: '0644'

    - name: Display completion message
      debug:
        msg:
          - "========================================================================="
          - "Talos Cluster Deployed Successfully!"
          - "========================================================================="
          - ""
          - "Kubeconfig: {{ kubeconfig_dest }}"
          - "Talosconfig: {{ talosconfig_file }}"
          - ""
          - "Quick start:"
          - "  kubectl get nodes  # Will show NotReady until CNI installed"
          - "  kubectl get pods -A"
          - "  talosctl --nodes {{ first_controlplane.ip }} etcd members"
          - ""
          - "IMPORTANT: Nodes will be NotReady until kube-ovn CNI is installed!"
          - "  This is expected. etcd and Kubernetes API are running."
          - "  See {{ talos_config_dir }}/DEPLOYMENT.md for next steps"
          - ""
          - "========================================================================="

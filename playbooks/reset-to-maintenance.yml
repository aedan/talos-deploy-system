---
- name: Reset all nodes to maintenance mode
  hosts: localhost
  gather_facts: yes
  vars:
    talos_config_dir: "{{ playbook_dir }}/../talos-configs"

  tasks:
    - name: Set inventory variables as facts
      set_fact:
        pxe_hosts: "{{ hostvars[inventory_hostname]['pxe_hosts'] }}"

    - name: Check if talosconfig exists
      stat:
        path: "{{ talos_config_dir }}/talosconfig"
      register: talosconfig_stat

    - name: Fail if talosconfig doesn't exist
      fail:
        msg: "Talosconfig not found. Please run generate-talos-configs.yml first."
      when: not talosconfig_stat.stat.exists

    - name: Display maintenance mode plan
      debug:
        msg:
          - "========================================="
          - "Reset Cluster to Maintenance Mode"
          - "========================================="
          - "Total nodes: {{ pxe_hosts | length }}"
          - "This will:"
          - "  1. Wipe ALL disks on each node via talosctl reset --wipe-mode=all"
          - "  2. Nodes will reboot with wiped disks"
          - "  3. Nodes will PXE boot into maintenance mode (no OS on disk)"
          - "  4. Delete talos-configs/ directory (NEW CLUSTER)"
          - "  5. Nodes will wait for new configuration"
          - "========================================="

    - name: Pause for confirmation
      pause:
        prompt: |

          WARNING: This will completely reset the cluster!
          - All running workloads will be stopped
          - All cluster state will be lost
          - Nodes will be wiped and rebooted
          - talos-configs/ will be deleted (including secrets)
          - You will need to regenerate configs and redeploy

          Press ENTER to continue or Ctrl+C to abort...

    - name: Identify control plane and worker nodes
      set_fact:
        controlplane_hosts: "{{ pxe_hosts | selectattr('role', 'equalto', 'controlplane') | list }}"
        worker_hosts: "{{ pxe_hosts | selectattr('role', 'equalto', 'worker') | list }}"
        first_controlplane_ip: "{{ (pxe_hosts | selectattr('role', 'equalto', 'controlplane') | first).ip }}"

    - name: Reset worker nodes first (using control plane endpoint)
      command: >
        talosctl --talosconfig {{ talos_config_dir }}/talosconfig
        --nodes {{ host.ip }}
        --endpoints {{ first_controlplane_ip }}
        reset --graceful=false --wipe-mode=all --reboot
      loop: "{{ worker_hosts }}"
      loop_control:
        loop_var: host
      register: worker_reset_result
      ignore_errors: yes
      no_log: true

    - name: Reset control plane nodes (using their own endpoint)
      command: >
        talosctl --talosconfig {{ talos_config_dir }}/talosconfig
        --nodes {{ host.ip }}
        --endpoints {{ host.ip }}
        reset --graceful=false --wipe-mode=all --reboot
      loop: "{{ controlplane_hosts }}"
      loop_control:
        loop_var: host
      register: controlplane_reset_result
      ignore_errors: yes
      no_log: true

    - name: Combine reset results
      set_fact:
        reset_result:
          results: "{{ (worker_reset_result.results | default([])) + (controlplane_reset_result.results | default([])) }}"

    - name: Wait for nodes to reboot into maintenance mode
      pause:
        seconds: 60
        prompt: "Waiting for nodes to reset and reboot into maintenance mode..."

    - name: Verify nodes are in maintenance mode (insecure API should respond)
      command: >
        talosctl --nodes {{ host.ip }}
        version --insecure
      loop: "{{ pxe_hosts }}"
      loop_control:
        loop_var: host
      register: maintenance_check
      ignore_errors: yes
      retries: 30
      delay: 10
      until: maintenance_check.rc == 0

    - name: Identify successful and failed nodes
      set_fact:
        maintenance_success: >-
          {{
            maintenance_check.results |
            selectattr('rc', 'defined') |
            selectattr('rc', 'equalto', 0) |
            map(attribute='host') |
            list
          }}
        maintenance_failed: >-
          {{
            maintenance_check.results |
            selectattr('rc', 'defined') |
            selectattr('rc', 'ne', 0) |
            map(attribute='host') |
            list
          }}

    - name: Delete talos-configs directory to force new cluster
      file:
        path: "{{ talos_config_dir }}"
        state: absent
      when: maintenance_success | length > 0

    - name: Display results
      debug:
        msg:
          - "========================================="
          - "Cluster Reset to Maintenance Mode"
          - "========================================="
          - ""
          - "Successfully in maintenance mode ({{ maintenance_success | length }}):"
          - "{% for host in maintenance_success %}  - {{ host.name }} ({{ host.ip }}){% endfor %}"
          - ""
          - "{% if maintenance_failed | length > 0 %}Failed to enter maintenance mode ({{ maintenance_failed | length }}):"
          - "{% for host in maintenance_failed %}  - {{ host.name }} ({{ host.ip }}){% endfor %}"
          - ""
          - "WARNING: Some nodes failed to enter maintenance mode!"
          - "Check these nodes manually or use pxe-boot-servers.yml as fallback."
          - "{% endif %}"
          - "talos-configs/ directory has been deleted."
          - ""
          - "Next steps to rebuild cluster:"
          - "  1. (Optional) Update talos_version in inventory.yml if upgrading"
          - "  2. Generate new configs: ansible-playbook -i inventory.yml playbooks/generate-talos-configs.yml"
          - "  3. Deploy new cluster: ansible-playbook -i inventory.yml playbooks/deploy-talos-cluster.yml"
          - ""
          - "NOTE: This will be a FRESH cluster with new secrets."
          - "      Previous kubeconfig and cluster data are lost."
          - "========================================="

    - name: Create maintenance reset log
      copy:
        content: |
          # Cluster Reset to Maintenance Mode Log

          Triggered: {{ ansible_date_time.iso8601 }}
          By: {{ ansible_env.USER }}@{{ ansible_hostname }}

          ## Reset Commands

          {% for result in reset_result.results %}
          - {{ result.host.name }} ({{ result.host.ip }}): {{ 'SUCCESS' if result.rc == 0 else 'FAILED - ' + (result.stderr | default('Unknown error')) }}
          {% endfor %}

          ## Maintenance Mode Verification

          Successfully in maintenance mode ({{ maintenance_success | length }}):
          {% for host in maintenance_success %}
          - {{ host.name }} ({{ host.ip }})
          {% endfor %}

          {% if maintenance_failed | length > 0 %}
          Failed to enter maintenance mode ({{ maintenance_failed | length }}):
          {% for host in maintenance_failed %}
          - {{ host.name }} ({{ host.ip }})
          {% endfor %}

          Fallback option:
          ```bash
          ansible-playbook -i inventory.yml playbooks/pxe-boot-servers.yml
          ```
          {% endif %}

          ## Deleted Files

          - Deleted: {{ talos_config_dir }}/

          ## Next Steps

          1. (Optional) Update talos_version in inventory.yml
          2. Generate new configurations:
             ```bash
             ansible-playbook -i inventory.yml playbooks/generate-talos-configs.yml
             ```
          3. Deploy new cluster:
             ```bash
             ansible-playbook -i inventory.yml playbooks/deploy-talos-cluster.yml
             ```

          NOTE: This is a FRESH cluster with new secrets and cluster ID.
        dest: "{{ playbook_dir }}/../maintenance-reset-{{ ansible_date_time.epoch }}.log"
        mode: '0644'
